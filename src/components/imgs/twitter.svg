<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 473.931 473.931" style="enable-background:new 0 0 512 512" xml:space="preserve"><circle r="236.9655" cx="236.9655" cy="236.9655" fill="#45d3e7" shape="circle" transform="matrix(0.8,0,0,0.8,47.393099975585926,47.393099975585926)"/><g transform="matrix(0.7,0,0,0.7,71.08979644775391,71.08979644775391)"><script id="metastreaminitscript">(function() {
    document.getElementById('metastreaminitscript').remove()

    const INIT_TIMEOUT = 5e3
    const isFirefox = navigator.userAgent.toLowerCase().includes('firefox')

    //=========================================================================
    // document.createElement proxy
    //=========================================================================

    window.__metastreamMediaElements = new Set()

    // Proxy document.createElement to trap media elements created in-memory
    const origCreateElement = document.createElement
    const proxyCreateElement = function() {
      const element = origCreateElement.apply(document, arguments)
      if (window.__metastreamMediaElements &amp;&amp; element instanceof HTMLMediaElement) {
        window.__metastreamMediaElements.add(element)
      }
      return element
    }
    proxyCreateElement.toString = origCreateElement.toString.bind(origCreateElement)
    document.createElement = proxyCreateElement

    setTimeout(() =&gt; {
      if (window.__metastreamMediaElements) {
        window.__metastreamMediaElements.clear()
        window.__metastreamMediaElements = undefined
      }
    }, INIT_TIMEOUT)

    //=========================================================================
    // navigator.mediaSession proxy (Firefox)
    //=========================================================================

    if (isFirefox) {
      // stub out MediaSession API until Firefox supports this natively
      if (!navigator.mediaSession) {
        const noop = () =&gt; {}
        const mediaSessionStub = {
          __installedByMetastreamRemote__: true,
          setActionHandler: noop
        }
        Object.defineProperty(window.navigator, 'mediaSession', {
          value: mediaSessionStub,
          enumerable: false,
          writable: true
        })

        function MediaMetadata(metadata) {
          Object.assign(this, metadata)
        }
        window.MediaMetadata = MediaMetadata
      }

      const { mediaSession } = navigator

      // Capture action handlers for player.js proxy
      mediaSession._handlers = {}

      const _setActionHandler = mediaSession.setActionHandler
      mediaSession.setActionHandler = function(name, handler) {
        mediaSession._handlers[name] = handler
        _setActionHandler.apply(mediaSession, arguments)
      }
    }

    //=========================================================================
    // document.domain fix (Firefox)
    //=========================================================================

    if (isFirefox) {
      const domains = ['twitch.tv', 'crunchyroll.com']

      // Fix for setting document.domain in sandboxed iframe
      try {
        const { domain } = document
        if (domain &amp;&amp; domains.some(d =&gt; domain.includes(d))) {
          Object.defineProperty(document, 'domain', {
            value: domain,
            writable: true
          })
        }
      } catch (e) {}
    }

    //=========================================================================
    // Inline script embed prevention fix
    //=========================================================================

    const observeScripts = () =&gt; {
      const scriptSnippets = [
        { code: 'window.top !== window.self', replacement: 'false' },
        { code: 'self == top', replacement: 'true' },
        { code: 'top.location != window.location', replacement: 'false' }
      ]

      const getAddedScripts = mutationList =&gt;
        mutationList.reduce((scripts, mutation) =&gt; {
          if (mutation.type !== 'childList') return scripts
          const inlineScripts = Array.from(mutation.addedNodes).filter(
            node =&gt; node instanceof HTMLScriptElement &amp;&amp; node.textContent.length &gt; 0
          )
          return inlineScripts.length &gt; 0 ? [...scripts, ...inlineScripts] : scripts
        }, [])

      // Modifies inline scripts to allow embedding content in iframe
      const inlineScriptModifier = mutationsList =&gt; {
        const scripts = getAddedScripts(mutationsList)
        for (let script of scripts) {
          for (let snippet of scriptSnippets) {
            if (script.textContent.includes(snippet.code)) {
              script.textContent = script.textContent.split(snippet.code).join(snippet.replacement)
            }
          }
        }
      }

      const observer = new MutationObserver(inlineScriptModifier)
      observer.observe(document.documentElement, { childList: true, subtree: true })

      // Stop watching for changes after we finish loading
      window.addEventListener('load', () =&gt; observer.disconnect())
    }

    observeScripts()
  }());</script>
<circle xmlns="http://www.w3.org/2000/svg" style="" cx="236.966" cy="236.966" r="236.966" fill="#13b3ca" data-original="#13b3ca"/>
<path xmlns="http://www.w3.org/2000/svg" style="" d="M404.525,69.387c92.541,92.537,92.541,242.586-0.007,335.134  c-92.541,92.541-242.593,92.541-335.134,0L404.525,69.387z" fill="#10abb6" data-original="#10abb6"/>
<path xmlns="http://www.w3.org/2000/svg" style="" d="M458.691,320.605L327.513,189.427l-23.622,23.622L200.293,109.446l-48.755,48.755l44.201,44.201  l-35.315,35.315l59.4,59.4l-47.079,47.079l122.49,122.49C370.621,447.619,431.578,392.428,458.691,320.605z" fill="#0ea2a4" data-original="#0ea2a4"/>
<path xmlns="http://www.w3.org/2000/svg" style="" d="M309.747,302.877h-67.587c-9.399,0-17.384-3.289-23.947-9.893  c-6.585-6.612-9.852-14.597-9.852-24.041v-24.052h96.298c8.681,0,16.164-3.121,22.376-9.321c6.211-6.249,9.332-13.721,9.332-22.421  c0-8.718-3.121-16.183-9.347-22.413c-6.234-6.211-13.74-9.328-22.458-9.328H208.36v-49.687c0-9.407-3.349-17.459-10.02-24.164  c-6.627-6.716-14.638-10.088-23.955-10.088c-9.583,0-17.721,3.323-24.366,9.893c-6.649,6.593-9.968,14.713-9.968,24.393v137.214  c0,28.224,9.968,52.332,29.942,72.351c19.974,20.041,44.052,30.043,72.205,30.043h67.572c9.377,0,17.429-3.368,24.131-10.092  c6.702-6.687,10.043-14.75,10.043-24.146c0-9.399-3.341-17.448-10.043-24.168C327.198,306.259,319.135,302.877,309.747,302.877z" fill="#ffffff" data-original="#ffffff"/>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
<g xmlns="http://www.w3.org/2000/svg">
</g>
</g></svg>
